// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dptf
Rcpp::NumericVector dptf(Rcpp::NumericVector y, double lam);
RcppExport SEXP _gaussdeconv_dptf(SEXP ySEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(dptf(y, lam));
    return rcpp_result_gen;
END_RCPP
}
// weight_dptf
Rcpp::NumericVector weight_dptf(Rcpp::NumericVector y, double lam, Rcpp::NumericVector w);
RcppExport SEXP _gaussdeconv_weight_dptf(SEXP ySEXP, SEXP lamSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weight_dptf(y, lam, w));
    return rcpp_result_gen;
END_RCPP
}
// estim_path
List estim_path(NumericVector y, NumericVector x, NumericVector w, int korder, NumericVector lambda, double lambdamax, double lambdamin, int nsol, double rho, int maxiter, double tolerance, double lambda_min_ratio, int verbose);
RcppExport SEXP _gaussdeconv_estim_path(SEXP ySEXP, SEXP xSEXP, SEXP wSEXP, SEXP korderSEXP, SEXP lambdaSEXP, SEXP lambdamaxSEXP, SEXP lambdaminSEXP, SEXP nsolSEXP, SEXP rhoSEXP, SEXP maxiterSEXP, SEXP toleranceSEXP, SEXP lambda_min_ratioSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type korder(korderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambdamax(lambdamaxSEXP);
    Rcpp::traits::input_parameter< double >::type lambdamin(lambdaminSEXP);
    Rcpp::traits::input_parameter< int >::type nsol(nsolSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estim_path(y, x, w, korder, lambda, lambdamax, lambdamin, nsol, rho, maxiter, tolerance, lambda_min_ratio, verbose));
    return rcpp_result_gen;
END_RCPP
}
// get_Dtil
Eigen::SparseMatrix<double> get_Dtil(int k, NumericVector xd);
RcppExport SEXP _gaussdeconv_get_Dtil(SEXP kSEXP, SEXP xdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xd(xdSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Dtil(k, xd));
    return rcpp_result_gen;
END_RCPP
}
// get_D
Eigen::SparseMatrix<double> get_D(int k, NumericVector xd);
RcppExport SEXP _gaussdeconv_get_D(SEXP kSEXP, SEXP xdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xd(xdSEXP);
    rcpp_result_gen = Rcpp::wrap(get_D(k, xd));
    return rcpp_result_gen;
END_RCPP
}
// create_lambda_test
NumericVector create_lambda_test(NumericVector lambda, double lambdamin, double lambdamax, double lambda_min_ratio, int nsol);
RcppExport SEXP _gaussdeconv_create_lambda_test(SEXP lambdaSEXP, SEXP lambdaminSEXP, SEXP lambdamaxSEXP, SEXP lambda_min_ratioSEXP, SEXP nsolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambdamin(lambdaminSEXP);
    Rcpp::traits::input_parameter< double >::type lambdamax(lambdamaxSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< int >::type nsol(nsolSEXP);
    rcpp_result_gen = Rcpp::wrap(create_lambda_test(lambda, lambdamin, lambdamax, lambda_min_ratio, nsol));
    return rcpp_result_gen;
END_RCPP
}
// doDv
NumericVector doDv(NumericVector v, int k, NumericVector xd);
RcppExport SEXP _gaussdeconv_doDv(SEXP vSEXP, SEXP kSEXP, SEXP xdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xd(xdSEXP);
    rcpp_result_gen = Rcpp::wrap(doDv(v, k, xd));
    return rcpp_result_gen;
END_RCPP
}
// doDtv
NumericVector doDtv(NumericVector v, int k, NumericVector xd);
RcppExport SEXP _gaussdeconv_doDtv(SEXP vSEXP, SEXP kSEXP, SEXP xdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xd(xdSEXP);
    rcpp_result_gen = Rcpp::wrap(doDtv(v, k, xd));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gaussdeconv_dptf", (DL_FUNC) &_gaussdeconv_dptf, 2},
    {"_gaussdeconv_weight_dptf", (DL_FUNC) &_gaussdeconv_weight_dptf, 3},
    {"_gaussdeconv_estim_path", (DL_FUNC) &_gaussdeconv_estim_path, 13},
    {"_gaussdeconv_get_Dtil", (DL_FUNC) &_gaussdeconv_get_Dtil, 2},
    {"_gaussdeconv_get_D", (DL_FUNC) &_gaussdeconv_get_D, 2},
    {"_gaussdeconv_create_lambda_test", (DL_FUNC) &_gaussdeconv_create_lambda_test, 5},
    {"_gaussdeconv_doDv", (DL_FUNC) &_gaussdeconv_doDv, 3},
    {"_gaussdeconv_doDtv", (DL_FUNC) &_gaussdeconv_doDtv, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gaussdeconv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
